// API service for handling HTTP requests and authentication

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:3001/api';

export interface ApiConfig {
  baseURL: string;
  timeout: number;
  headers: Record<string, string>;
}

class ApiService {
  private config: ApiConfig;
  private authToken: string | null = null;

  constructor(config?: Partial<ApiConfig>) {
    this.config = {
      baseURL: API_BASE_URL,
      timeout: 10000,
      headers: {
        'Content-Type': 'application/json',
      },
      ...config,
    };
    
    // Load auth token from localStorage
    this.authToken = localStorage.getItem('auth_token');
  }

  private getHeaders(): Record<string, string> {
    const headers = { ...this.config.headers };
    
    if (this.authToken) {
      headers.Authorization = `Bearer ${this.authToken}`;
    }
    
    return headers;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const url = `${this.config.baseURL}${endpoint}`;
    
    const config: RequestInit = {
      ...options,
      headers: {
        ...this.getHeaders(),
        ...options.headers,
      },
    };

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);
      
      const response = await fetch(url, {
        ...config,
        signal: controller.signal,
      });
      
      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }

      const contentType = response.headers.get('content-type');
      if (contentType && contentType.includes('application/json')) {
        return await response.json();
      }
      
      return response.text() as unknown as T;
    } catch (error) {
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          throw new Error('Request timeout');
        }
        throw error;
      }
      throw new Error('An unknown error occurred');
    }
  }

  // Authentication methods
  async login(email: string, password: string) {
    const response = await this.request<{ token: string; user: any }>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
    
    this.setAuthToken(response.token);
    return response;
  }

  async register(email: string, password: string, name: string) {
    const response = await this.request<{ token: string; user: any }>('/auth/register', {
      method: 'POST',
      body: JSON.stringify({ email, password, name }),
    });
    
    this.setAuthToken(response.token);
    return response;
  }

  async logout() {
    try {
      await this.request('/auth/logout', { method: 'POST' });
    } finally {
      this.clearAuthToken();
    }
  }

  async refreshToken() {
    const response = await this.request<{ token: string }>('/auth/refresh', {
      method: 'POST',
    });
    
    this.setAuthToken(response.token);
    return response;
  }

  // User profile methods
  async getUserProfile() {
    return this.request<any>('/user/profile');
  }

  async updateUserProfile(updates: any) {
    return this.request<any>('/user/profile', {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  }

  // Calculation methods
  async getSavedCalculations() {
    return this.request<any[]>('/calculations');
  }

  async saveCalculation(calculation: any) {
    return this.request<any>('/calculations', {
      method: 'POST',
      body: JSON.stringify(calculation),
    });
  }

  async updateCalculation(id: string, updates: any) {
    return this.request<any>(`/calculations/${id}`, {
      method: 'PUT',
      body: JSON.stringify(updates),
    });
  }

  async deleteCalculation(id: string) {
    return this.request<{ success: boolean }>(`/calculations/${id}`, {
      method: 'DELETE',
    });
  }

  // Market data methods
  async getMarketData(symbol: string) {
    return this.request<any>(`/market/${symbol}`);
  }

  async getHistoricalReturns(assetClass: string, period: string) {
    return this.request<any>(`/market/historical/${assetClass}?period=${period}`);
  }

  async getEconomicIndicators() {
    return this.request<any>('/market/indicators');
  }

  // File upload methods
  async uploadFile(file: File, endpoint: string) {
    const formData = new FormData();
    formData.append('file', file);
    
    return this.request<any>(endpoint, {
      method: 'POST',
      body: formData,
      headers: {
        // Don't set Content-Type for FormData, let browser set it
        Authorization: this.authToken ? `Bearer ${this.authToken}` : '',
      },
    });
  }

  // Token management
  setAuthToken(token: string) {
    this.authToken = token;
    localStorage.setItem('auth_token', token);
  }

  clearAuthToken() {
    this.authToken = null;
    localStorage.removeItem('auth_token');
  }

  getAuthToken(): string | null {
    return this.authToken;
  }

  isAuthenticated(): boolean {
    return !!this.authToken;
  }
}

// Create and export a singleton instance
export const apiService = new ApiService();
export default apiService;
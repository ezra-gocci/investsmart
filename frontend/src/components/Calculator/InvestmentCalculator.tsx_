import React, { useState, useEffect } from 'react';
import { useLanguage, languages } from '../../translations/LanguageContext';
import InvestmentForm from './InvestmentForm';
import ResultsDisplay from './ResultsDisplay';
import RecommendationsPanel from './RecommendationsPanel';

interface InvestmentInputs {
  initialCapital: number;
  annualRate: number;
  termYears: number;
  monthlyAddition: number;
  compoundingFrequency: string;
  targetAmount: number;
}

interface InvestmentResult {
  totalContributions: number;
  interestEarned: number;
  finalAmount: number;
  effectiveAnnualReturn: number;
  yearlyBreakdown: YearlyData[];
}

interface YearlyData {
  year: number;
  initialAmount: number;
  revenue: number;
  investmentAdds: number;
  endingAmount: number;
}

interface LockedFields {
  initialCapital: boolean;
  annualRate: boolean;
  termYears: boolean;
  monthlyAddition: boolean;
  compoundingFrequency: boolean;
  targetAmount: boolean;
}

const InvestmentCalculator: React.FC = () => {
  const [inputs, setInputs] = useState<InvestmentInputs>({
    initialCapital: 10000,
    annualRate: 5,
    termYears: 10,
    monthlyAddition: 500,
    compoundingFrequency: 'Annually',
    targetAmount: 50000
  });

  const [lockedFields, setLockedFields] = useState<LockedFields>({
    initialCapital: false,
    annualRate: true,
    termYears: false,
    monthlyAddition: true,
    compoundingFrequency: false,
    targetAmount: true
  });

  const [result, setResult] = useState<InvestmentResult | null>(null);
  const [activeSection, setActiveSection] = useState('calculate');
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [showLanguageDropdown, setShowLanguageDropdown] = useState(false);
  const { language, setLanguage, t } = useLanguage();

  const handleInputChange = (field: keyof InvestmentInputs, value: string) => {
    if (!lockedFields[field]) {
      setInputs(prev => ({
        ...prev,
        [field]: field === 'compoundingFrequency' ? value : parseFloat(value) || 0
      }));
    }
  };

  const toggleLock = (field: keyof LockedFields) => {
    setLockedFields(prev => ({
      ...prev,
      [field]: !prev[field]
    }));
  };

  const calculateInvestment = (): InvestmentResult => {
    const { initialCapital, annualRate, termYears, monthlyAddition } = inputs;
    const monthlyRate = annualRate / 100 / 12;
    
    let currentAmount = initialCapital;
    const yearlyBreakdown: YearlyData[] = [];
    let totalContributions = initialCapital;
    
    for (let year = 1; year <= termYears; year++) {
      const startAmount = currentAmount;
      let yearRevenue = 0;
      let yearContributions = 0;
      
      for (let month = 1; month <= 12; month++) {
        const interest = currentAmount * monthlyRate;
        yearRevenue += interest;
        currentAmount += interest + monthlyAddition;
        yearContributions += monthlyAddition;
      }
      
      totalContributions += yearContributions;
      
      yearlyBreakdown.push({
        year,
        initialAmount: Math.round(startAmount),
        revenue: Math.round(yearRevenue),
        investmentAdds: Math.round(yearContributions),
        endingAmount: Math.round(currentAmount)
      });
    }
    
    const finalAmount = currentAmount;
    const interestEarned = finalAmount - totalContributions;
    const effectiveAnnualReturn = ((finalAmount / initialCapital) ** (1 / termYears) - 1) * 100;
    
    return {
      totalContributions: Math.round(totalContributions),
      interestEarned: Math.round(interestEarned),
      finalAmount: Math.round(finalAmount),
      effectiveAnnualReturn: Math.round(effectiveAnnualReturn * 10) / 10,
      yearlyBreakdown
    };
  };

  useEffect(() => {
    setResult(calculateInvestment());
  }, [inputs]);

  // Scroll spy functionality
  useEffect(() => {
    const handleScroll = () => {
      const sections = ['calculate', 'recommend', 'explain'];
      const scrollPosition = window.scrollY + 150; // Offset for header
      
      for (let i = sections.length - 1; i >= 0; i--) {
        const section = document.getElementById(sections[i]);
        if (section && section.offsetTop <= scrollPosition) {
          setActiveSection(sections[i]);
          break;
        }
      }
    };

    window.addEventListener('scroll', handleScroll);
    handleScroll(); // Check initial position
    
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0,
      maximumFractionDigits: 0
    }).format(amount);
  };

  const handleAuthClick = () => {
    if (isLoggedIn) {
      // Logout
      setIsLoggedIn(false);
    } else {
      // Simulate successful login
      setIsLoggedIn(true);
    }
  };

  return (
      {/* Main Content */}
      <main className="container mx-auto flex-1 px-4 py-8 sm:px-6 lg:px-8">
        <div className="mx-auto max-w-7xl">
          {/* Title Section */}
          <div className="mb-12 text-center">
            <h1 className="text-4xl font-bold tracking-tight sm:text-5xl text-gray-900 dark:text-white">{t('calculator.title')}</h1>
            <p className="mt-4 text-lg text-gray-600 dark:text-gray-400">{t('calculator.subtitle')}</p>
          </div>

          {/* Investment Form */}
          <InvestmentForm
            inputs={inputs}
            lockedFields={lockedFields}
            onInputChange={handleInputChange}
            onToggleLock={toggleLock}
            onCalculate={() => setResult(calculateInvestment())}
            isLoggedIn={isLoggedIn}
          />

          {/* Results Display */}
          {result && (
            <ResultsDisplay
              result={result}
              formatCurrency={formatCurrency}
              isLoggedIn={isLoggedIn}
            />
          )}

                {/* Visualizations */}
                <div>
                  <h2 className="mb-4 text-2xl font-bold text-gray-900 dark:text-white">{t('calculator.visualizations.title')}</h2>
                  <div className="grid grid-cols-1 gap-8 md:grid-cols-2">
                    {/* Growth Chart */}
                    <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                      <p className="text-base font-medium text-gray-900 dark:text-white">{t('calculator.visualizations.growthChart')}</p>
                      <div className="mt-4 h-64 flex items-center justify-center">
                        <div className="text-gray-500 dark:text-gray-400">Chart visualization would go here</div>
                      </div>
                      <div className="mt-4 flex justify-center gap-6 text-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-purple-400"></div>
                          <span className="text-gray-700 dark:text-gray-300">Invested Amount</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-pink-400"></div>
                          <span className="text-gray-700 dark:text-gray-300">Revenue</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <span className="text-gray-700 dark:text-gray-300">Total</span>
                        </div>
                      </div>
                    </div>

                    {/* Breakdown Chart */}
                    <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                      <p className="text-base font-medium text-gray-900 dark:text-white">{t('calculator.visualizations.breakdown')}</p>
                      <div className="mt-4 flex h-64 items-center justify-center">
                        <div className="text-gray-500 dark:text-gray-400">Pie chart visualization would go here</div>
                      </div>
                      <div className="mt-4 flex justify-center gap-6 text-sm">
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-yellow-400"></div>
                          <span className="text-gray-700 dark:text-gray-300">Initial Investment (70%)</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-pink-500"></div>
                          <span className="text-gray-700 dark:text-gray-300">Monthly Additions (20%)</span>
                        </div>
                        <div className="flex items-center gap-2">
                          <div className="h-3 w-3 rounded-full bg-green-500"></div>
                          <span className="text-gray-700 dark:text-gray-300">Revenue (10%)</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Annual Aggregate Table */}
                <div>
                  <h2 className="mb-4 text-2xl font-bold text-gray-900 dark:text-white">{t('calculator.table.title')}</h2>
                  <div className="overflow-x-auto rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800">
                    <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                      <thead className="bg-gray-200 dark:bg-gray-700">
                        <tr>
                          <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400" scope="col">{t('calculator.table.year')}</th>
                          <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400" scope="col">{t('calculator.table.initialAmount')}</th>
                          <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400" scope="col">{t('calculator.table.revenue')}</th>
                          <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400" scope="col">{t('calculator.table.investmentAdds')}</th>
                          <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-600 dark:text-gray-400" scope="col">{t('calculator.table.endingAmount')}</th>
                        </tr>
                      </thead>
                      <tbody className="divide-y divide-gray-200 dark:divide-gray-700">
                        {result.yearlyBreakdown.slice(0, 3).map((yearData) => (
                          <tr key={yearData.year}>
                            <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900 dark:text-white">{yearData.year}</td>
                            <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700 dark:text-gray-300">{formatCurrency(yearData.initialAmount)}</td>
                            <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700 dark:text-gray-300">{formatCurrency(yearData.revenue)}</td>
                            <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700 dark:text-gray-300">{formatCurrency(yearData.investmentAdds)}</td>
                            <td className="whitespace-nowrap px-6 py-4 text-sm text-gray-700 dark:text-gray-300">{formatCurrency(yearData.endingAmount)}</td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>

          {/* Investment Recommendations */}
          <div id="recommend" style={{scrollMarginTop: '100px'}}>
            <RecommendationsPanel
              isLoggedIn={isLoggedIn}
              formatCurrency={formatCurrency}
            />
          </div>

          {/* Explanation Section */}
          <div id="explain" style={{scrollMarginTop: '100px'}}>
            <h2 className="mb-4 text-2xl font-bold text-gray-900 dark:text-white">{t('explanations.title')}</h2>
            <p className="mb-8 text-gray-600 dark:text-gray-400">{t('explanations.subtitle')}</p>
            
            <div className="space-y-8">
              {/* Compound Interest Formula */}
              <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                <div className="flex flex-col gap-6">
                  <div>
                    <p className="text-sm font-medium text-green-500">{t('explanations.formula.label')}</p>
                    <h3 className="text-lg font-bold text-gray-900 dark:text-white">{t('explanations.formula.title')}</h3>
                    <div className="mt-4 rounded-lg bg-gray-200 dark:bg-gray-700 p-4 font-mono text-sm">
                      <div className="text-gray-900 dark:text-white">
                        <div className="mb-2"><strong>FV = PV × (1 + r/n)^(n×t) + PMT × [((1 + r/n)^(n×t) - 1) / (r/n)]</strong></div>
                        <div className="text-xs text-gray-600 dark:text-gray-400 space-y-1">
                          <div>• FV = Future Value (final amount)</div>
                          <div>• PV = Present Value (initial capital)</div>
                          <div>• r = Annual interest rate (as decimal)</div>
                          <div>• n = Compounding frequency per year</div>
                          <div>• t = Time in years</div>
                          <div>• PMT = Regular payment amount (monthly addition)</div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Input Fields Explanation */}
              <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                <div>
                  <p className="text-sm font-medium text-green-500">{t('explanations.inputFields.label')}</p>
                  <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">{t('explanations.inputFields.title')}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="space-y-4">
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.initialCapital.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.initialCapital.description')}</p>
                      </div>
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.monthlyAddition.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.monthlyAddition.description')}</p>
                      </div>
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.annualRate.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.annualRate.description')}</p>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.termYears.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.termYears.description')}</p>
                      </div>
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.compoundingFrequency.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.compoundingFrequency.description')}</p>
                      </div>
                      <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.inputFields.targetAmount.title')}</h4>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.inputFields.targetAmount.description')}</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Results Explanation */}
              <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                <div>
                  <p className="text-sm font-medium text-green-500">{t('explanations.resultsBreakdown.label')}</p>
                  <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">{t('explanations.resultsBreakdown.title')}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="h-3 w-3 rounded-full bg-yellow-400"></div>
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.resultsBreakdown.totalInvested.title')}</h4>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.resultsBreakdown.totalInvested.description')}</p>
                    </div>
                    <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="h-3 w-3 rounded-full bg-pink-500"></div>
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.resultsBreakdown.interestEarned.title')}</h4>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.resultsBreakdown.interestEarned.description')}</p>
                    </div>
                    <div className="p-4 rounded-lg bg-gray-200 dark:bg-gray-700">
                      <div className="flex items-center gap-2 mb-2">
                        <div className="h-3 w-3 rounded-full bg-green-500"></div>
                        <h4 className="font-semibold text-gray-900 dark:text-white">{t('explanations.resultsBreakdown.finalValue.title')}</h4>
                      </div>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.resultsBreakdown.finalValue.description')}</p>
                    </div>
                  </div>
                </div>
              </div>

              {/* Key Insights */}
              <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-100 dark:bg-gray-800 p-6">
                <div>
                  <p className="text-sm font-medium text-green-500">{t('explanations.keyInsights.label')}</p>
                  <h3 className="text-lg font-bold text-gray-900 dark:text-white mb-4">{t('explanations.keyInsights.title')}</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-2">{t('explanations.keyInsights.time.title')}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.keyInsights.time.description')}</p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-2">{t('explanations.keyInsights.consistency.title')}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.keyInsights.consistency.description')}</p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-2">{t('explanations.keyInsights.rateImpact.title')}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.keyInsights.rateImpact.description')}</p>
                    </div>
                    <div>
                      <h4 className="font-semibold text-gray-900 dark:text-white mb-2">{t('explanations.keyInsights.compoundingFrequency.title')}</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">{t('explanations.keyInsights.compoundingFrequency.description')}</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
               
            </div>
          )}
        </div>
      </main>
    </div>
  );
};

export default InvestmentCalculator;
import React from 'react';
import { useLanguage } from '../../translations/LanguageContext';
import Card from '../UI/Card';
import Button from '../UI/Button';

interface RecommendationsPanelProps {
  isLoggedIn: boolean;
  formatCurrency: (amount: number) => string;
}

const RecommendationsPanel: React.FC<RecommendationsPanelProps> = ({
  isLoggedIn,
  formatCurrency,
}) => {
  const { t } = useLanguage();

  if (!isLoggedIn) {
    return null;
  }

  const riskAssessment = {
    level: 'moderate',
    score: 6,
    description: 'Based on your investment timeline and goals, you have a moderate risk tolerance.'
  };

  const allocations = [
    { name: 'Stocks', percentage: 60, amount: 60000, color: 'bg-blue-500' },
    { name: 'Bonds', percentage: 25, amount: 25000, color: 'bg-green-500' },
    { name: 'Real Estate', percentage: 10, amount: 10000, color: 'bg-yellow-500' },
    { name: 'Cash', percentage: 5, amount: 5000, color: 'bg-gray-500' }
  ];

  const recommendations = [
    {
      type: 'ETF',
      name: 'Vanguard Total Stock Market ETF (VTI)',
      allocation: '40%',
      reason: 'Low-cost broad market exposure'
    },
    {
      type: 'ETF',
      name: 'Vanguard Total Bond Market ETF (BND)',
      allocation: '25%',
      reason: 'Stable income and portfolio balance'
    },
    {
      type: 'ETF',
      name: 'Vanguard International Stock ETF (VTIAX)',
      allocation: '20%',
      reason: 'International diversification'
    },
    {
      type: 'REIT',
      name: 'Vanguard Real Estate ETF (VNQ)',
      allocation: '10%',
      reason: 'Real estate exposure and inflation hedge'
    },
    {
      type: 'Cash',
      name: 'High-Yield Savings Account',
      allocation: '5%',
      reason: 'Emergency fund and liquidity'
    }
  ];

  return (
    <div className="space-y-8">
      {/* Risk Assessment */}
      <Card title={t('calculator.recommendations.riskAssessment')}>
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {t('calculator.recommendations.riskLevel')}
            </span>
            <span className="text-sm font-bold text-blue-600 capitalize">
              {riskAssessment.level}
            </span>
          </div>
          
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
              {t('calculator.recommendations.riskScore')}
            </span>
            <span className="text-sm font-bold text-blue-600">
              {riskAssessment.score}/10
            </span>
          </div>
          
          <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300"
              style={{ width: `${(riskAssessment.score / 10) * 100}%` }}
            ></div>
          </div>
          
          <p className="text-sm text-gray-600 dark:text-gray-400">
            {riskAssessment.description}
          </p>
        </div>
      </Card>

      {/* Asset Allocation */}
      <Card title={t('calculator.recommendations.assetAllocation')}>
        <div className="space-y-4">
          {allocations.map((allocation, index) => (
            <div key={index} className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className={`w-4 h-4 rounded-full ${allocation.color}`}></div>
                <span className="text-sm font-medium text-gray-700 dark:text-gray-300">
                  {allocation.name}
                </span>
              </div>
              <div className="text-right">
                <div className="text-sm font-bold text-gray-900 dark:text-white">
                  {allocation.percentage}%
                </div>
                <div className="text-xs text-gray-500 dark:text-gray-400">
                  {formatCurrency(allocation.amount)}
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="mt-6">
          <div className="flex h-4 rounded-full overflow-hidden">
            {allocations.map((allocation, index) => (
              <div
                key={index}
                className={allocation.color}
                style={{ width: `${allocation.percentage}%` }}
              ></div>
            ))}
          </div>
        </div>
      </Card>

      {/* Investment Recommendations */}
      <Card title={t('calculator.recommendations.investmentSuggestions')}>
        <div className="space-y-4">
          {recommendations.map((rec, index) => (
            <div key={index} className="border border-gray-200 dark:border-gray-700 rounded-lg p-4">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                      {rec.type}
                    </span>
                    <span className="text-sm font-bold text-gray-900 dark:text-white">
                      {rec.allocation}
                    </span>
                  </div>
                  <h4 className="text-sm font-semibold text-gray-900 dark:text-white mb-1">
                    {rec.name}
                  </h4>
                  <p className="text-xs text-gray-600 dark:text-gray-400">
                    {rec.reason}
                  </p>
                </div>
              </div>
            </div>
          ))}
        </div>
        
        <div className="mt-6 p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg">
          <div className="flex items-start gap-3">
            <div className="flex-shrink-0">
              <svg className="w-5 h-5 text-yellow-600 dark:text-yellow-400" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
              </svg>
            </div>
            <div>
              <h4 className="text-sm font-medium text-yellow-800 dark:text-yellow-200">
                {t('calculator.recommendations.disclaimer.title')}
              </h4>
              <p className="text-xs text-yellow-700 dark:text-yellow-300 mt-1">
                {t('calculator.recommendations.disclaimer.text')}
              </p>
            </div>
          </div>
        </div>
        
        <div className="mt-4 flex gap-3">
          <Button variant="primary" size="sm">
            {t('calculator.recommendations.savePortfolio')}
          </Button>
          <Button variant="secondary" size="sm">
            {t('calculator.recommendations.getAdvice')}
          </Button>
        </div>
      </Card>
    </div>
  );
};

export default RecommendationsPanel;
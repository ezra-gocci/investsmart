// Utility functions for validating user inputs and form data

export interface ValidationResult {
  isValid: boolean;
  message?: string;
}

/**
 * Validate email address format
 */
export const validateEmail = (email: string): ValidationResult => {
  if (!email) {
    return { isValid: false, message: 'Email is required' };
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return { isValid: false, message: 'Please enter a valid email address' };
  }

  return { isValid: true };
};

/**
 * Validate password strength
 */
export const validatePassword = (password: string): ValidationResult => {
  if (!password) {
    return { isValid: false, message: 'Password is required' };
  }

  if (password.length < 8) {
    return { isValid: false, message: 'Password must be at least 8 characters long' };
  }

  if (!/(?=.*[a-z])/.test(password)) {
    return { isValid: false, message: 'Password must contain at least one lowercase letter' };
  }

  if (!/(?=.*[A-Z])/.test(password)) {
    return { isValid: false, message: 'Password must contain at least one uppercase letter' };
  }

  if (!/(?=.*\d)/.test(password)) {
    return { isValid: false, message: 'Password must contain at least one number' };
  }

  if (!/(?=.*[!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?])/.test(password)) {
    return { isValid: false, message: 'Password must contain at least one special character' };
  }

  return { isValid: true };
};

/**
 * Validate that passwords match
 */
export const validatePasswordMatch = (password: string, confirmPassword: string): ValidationResult => {
  if (password !== confirmPassword) {
    return { isValid: false, message: 'Passwords do not match' };
  }

  return { isValid: true };
};

/**
 * Validate phone number format
 */
export const validatePhoneNumber = (phone: string): ValidationResult => {
  if (!phone) {
    return { isValid: false, message: 'Phone number is required' };
  }

  const cleaned = phone.replace(/\D/g, '');
  if (cleaned.length < 10 || cleaned.length > 11) {
    return { isValid: false, message: 'Please enter a valid phone number' };
  }

  return { isValid: true };
};

/**
 * Validate required field
 */
export const validateRequired = (value: any, fieldName: string = 'Field'): ValidationResult => {
  if (value === null || value === undefined || value === '') {
    return { isValid: false, message: `${fieldName} is required` };
  }

  if (typeof value === 'string' && value.trim() === '') {
    return { isValid: false, message: `${fieldName} is required` };
  }

  return { isValid: true };
};

/**
 * Validate numeric input
 */
export const validateNumber = (
  value: string | number,
  options: {
    min?: number;
    max?: number;
    integer?: boolean;
    positive?: boolean;
    fieldName?: string;
  } = {}
): ValidationResult => {
  const { min, max, integer = false, positive = false, fieldName = 'Value' } = options;
  
  if (value === '' || value === null || value === undefined) {
    return { isValid: false, message: `${fieldName} is required` };
  }

  const num = typeof value === 'string' ? parseFloat(value) : value;
  
  if (isNaN(num)) {
    return { isValid: false, message: `${fieldName} must be a valid number` };
  }

  if (positive && num <= 0) {
    return { isValid: false, message: `${fieldName} must be positive` };
  }

  if (integer && !Number.isInteger(num)) {
    return { isValid: false, message: `${fieldName} must be a whole number` };
  }

  if (min !== undefined && num < min) {
    return { isValid: false, message: `${fieldName} must be at least ${min}` };
  }

  if (max !== undefined && num > max) {
    return { isValid: false, message: `${fieldName} must be no more than ${max}` };
  }

  return { isValid: true };
};

/**
 * Validate investment amount
 */
export const validateInvestmentAmount = (amount: string | number): ValidationResult => {
  return validateNumber(amount, {
    min: 0.01,
    max: 1000000000, // 1 billion
    positive: true,
    fieldName: 'Investment amount'
  });
};

/**
 * Validate interest rate
 */
export const validateInterestRate = (rate: string | number): ValidationResult => {
  return validateNumber(rate, {
    min: -50,
    max: 100,
    fieldName: 'Interest rate'
  });
};

/**
 * Validate time period in years
 */
export const validateTimePeriod = (years: string | number): ValidationResult => {
  return validateNumber(years, {
    min: 0.01,
    max: 100,
    positive: true,
    fieldName: 'Time period'
  });
};

/**
 * Validate percentage value
 */
export const validatePercentage = (
  value: string | number,
  fieldName: string = 'Percentage'
): ValidationResult => {
  return validateNumber(value, {
    min: 0,
    max: 100,
    fieldName
  });
};

/**
 * Validate URL format
 */
export const validateUrl = (url: string): ValidationResult => {
  if (!url) {
    return { isValid: false, message: 'URL is required' };
  }

  try {
    new URL(url.startsWith('http') ? url : `https://${url}`);
    return { isValid: true };
  } catch {
    return { isValid: false, message: 'Please enter a valid URL' };
  }
};

/**
 * Validate date format and range
 */
export const validateDate = (
  date: string | Date,
  options: {
    minDate?: Date;
    maxDate?: Date;
    fieldName?: string;
  } = {}
): ValidationResult => {
  const { minDate, maxDate, fieldName = 'Date' } = options;
  
  if (!date) {
    return { isValid: false, message: `${fieldName} is required` };
  }

  const dateObj = new Date(date);
  
  if (isNaN(dateObj.getTime())) {
    return { isValid: false, message: `Please enter a valid ${fieldName.toLowerCase()}` };
  }

  if (minDate && dateObj < minDate) {
    return { isValid: false, message: `${fieldName} must be after ${minDate.toLocaleDateString()}` };
  }

  if (maxDate && dateObj > maxDate) {
    return { isValid: false, message: `${fieldName} must be before ${maxDate.toLocaleDateString()}` };
  }

  return { isValid: true };
};

/**
 * Validate age
 */
export const validateAge = (age: string | number): ValidationResult => {
  return validateNumber(age, {
    min: 1,
    max: 150,
    integer: true,
    positive: true,
    fieldName: 'Age'
  });
};

/**
 * Validate file upload
 */
export const validateFile = (
  file: File,
  options: {
    maxSize?: number; // in bytes
    allowedTypes?: string[];
    maxFiles?: number;
  } = {}
): ValidationResult => {
  const { maxSize = 10 * 1024 * 1024, allowedTypes = [], maxFiles = 1 } = options; // Default 10MB

  if (!file) {
    return { isValid: false, message: 'File is required' };
  }

  if (file.size > maxSize) {
    const maxSizeMB = Math.round(maxSize / (1024 * 1024));
    return { isValid: false, message: `File size must be less than ${maxSizeMB}MB` };
  }

  if (allowedTypes.length > 0 && !allowedTypes.includes(file.type)) {
    return { isValid: false, message: `File type must be one of: ${allowedTypes.join(', ')}` };
  }

  return { isValid: true };
};

/**
 * Validate array length
 */
export const validateArrayLength = (
  array: any[],
  options: {
    min?: number;
    max?: number;
    fieldName?: string;
  } = {}
): ValidationResult => {
  const { min, max, fieldName = 'Items' } = options;
  
  if (!Array.isArray(array)) {
    return { isValid: false, message: `${fieldName} must be an array` };
  }

  if (min !== undefined && array.length < min) {
    return { isValid: false, message: `Must have at least ${min} ${fieldName.toLowerCase()}` };
  }

  if (max !== undefined && array.length > max) {
    return { isValid: false, message: `Must have no more than ${max} ${fieldName.toLowerCase()}` };
  }

  return { isValid: true };
};

/**
 * Validate string length
 */
export const validateStringLength = (
  value: string,
  options: {
    min?: number;
    max?: number;
    fieldName?: string;
  } = {}
): ValidationResult => {
  const { min, max, fieldName = 'Field' } = options;
  
  if (typeof value !== 'string') {
    return { isValid: false, message: `${fieldName} must be text` };
  }

  if (min !== undefined && value.length < min) {
    return { isValid: false, message: `${fieldName} must be at least ${min} characters` };
  }

  if (max !== undefined && value.length > max) {
    return { isValid: false, message: `${fieldName} must be no more than ${max} characters` };
  }

  return { isValid: true };
};

/**
 * Validate investment goal allocation (should sum to 100%)
 */
export const validateAllocationSum = (allocations: number[]): ValidationResult => {
  const sum = allocations.reduce((total, allocation) => total + allocation, 0);
  const tolerance = 0.01; // Allow small rounding errors
  
  if (Math.abs(sum - 100) > tolerance) {
    return { isValid: false, message: 'Asset allocations must sum to 100%' };
  }

  return { isValid: true };
};

/**
 * Validate risk tolerance level
 */
export const validateRiskTolerance = (riskLevel: string): ValidationResult => {
  const validLevels = ['conservative', 'moderate', 'aggressive'];
  
  if (!validLevels.includes(riskLevel)) {
    return { isValid: false, message: 'Please select a valid risk tolerance level' };
  }

  return { isValid: true };
};

/**
 * Validate compounding frequency
 */
export const validateCompoundingFrequency = (frequency: string): ValidationResult => {
  const validFrequencies = ['annually', 'semi-annually', 'quarterly', 'monthly', 'weekly', 'daily', 'continuously'];
  
  if (!validFrequencies.includes(frequency)) {
    return { isValid: false, message: 'Please select a valid compounding frequency' };
  }

  return { isValid: true };
};

/**
 * Validate multiple fields at once
 */
export const validateFields = (
  fields: Record<string, any>,
  validators: Record<string, (value: any) => ValidationResult>
): { isValid: boolean; errors: Record<string, string> } => {
  const errors: Record<string, string> = {};
  let isValid = true;

  for (const [fieldName, value] of Object.entries(fields)) {
    const validator = validators[fieldName];
    if (validator) {
      const result = validator(value);
      if (!result.isValid) {
        errors[fieldName] = result.message || 'Invalid value';
        isValid = false;
      }
    }
  }

  return { isValid, errors };
};